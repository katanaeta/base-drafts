



Network Working Group                                        A. Davidson
Internet-Draft                                            Brave Software
Intended status: Informational                         29 September 2021
Expires: 2 April 2022


                  Privacy Pass Protocol Specification
                   draft-ietf-privacypass-integration

Abstract

   This document specifies the necessary integration for building the
   Privacy Pass protocol, supporting symmetric verification and public
   metadata, on top of an existing oblivious pseudorandom function
   protocol.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 2 April 2022.

Copyright Notice

   Copyright (c) 2021 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Simplified BSD License text
   as described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Simplified BSD License.

Table of Contents

   1.  Introduction
   2.  Terminology
   3.  Privacy Pass flow
   4.  Partially Oblivious Pseudorandom Function Protocol
     4.1.  Security guarantees
     4.2.  Metadata
   5.  Protocol ciphersuites
   6.  References
     6.1.  Normative References
     6.2.  Informative References
   Author's Address

1.  Introduction

   The Privacy Pass protocol provides a privacy-preserving authorization
   mechanism.  In essence, the protocol allows clients to provide
   cryptographic tokens that prove nothing other than that they have
   been authorized by a given server in the past
   [I-D.ietf-privacypass-architecture].

   This document provides the necessary integration for building the
   authorization framework, based on existing constructions of oblivious
   pseudorandom function protocols [I-D.irtf-cfrg-voprf].  Moreover, we
   show how this integration allows public metadata to be introduced to
   the protocol, that is agreed by both clients and servers.

   This document DOES NOT cover the architectural framework required for
   running and maintaining the Privacy Pass protocol in the Internet
   setting.  In addition, it DOES NOT cover the choices that are
   necessary for ensuring that client privacy leaks do not occur.  Both
   of these considerations are covered in
   [I-D.ietf-privacypass-architecture].  In addition, considerations of
   how to embed the protocol interactions in the HTTP setting are
   considered in [I-D.ietf-privacypass-http-api].

2.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

   The following terms are used throughout this document.

   *  Client: An entity that provides authorization tokens to services
      across the Internet, in return for authorization.

   *  Server: A service (also known as an Issuer) that issues Privacy
      Pass tokens to clients.

   *  Key: The secret key used by the server for authorizing client
      data.

   *  Blinding/unblinding: A pair of cryptographic operations that allow
      randomly distributing and revealing some underlying data, whilst
      preserving the ability to generate valid signatures on data
      itself.

   We assume that all protocol messages are encoded into raw byte format
   before being sent across the wire.

3.  Privacy Pass flow

   There are three phases in the protocol: the initialization phase, the
   issuance phase, and the redemption phase.

   In the initialization phase, the server samples a keypair and
   publishes a public key (or key commitment) to a public repository.

   In the issuance phase:

   *  The client and server optionally agree on some public metadata.

   *  The client retrieves an servers public key, and generates some
      initial token data.  The client cryptographically blinds this
      data, and sends it to the server.

   *  The server signs the blinded token data (including optional), and
      produces a proof that it used the committed keypair, and sends the
      signature and proof back to the client.

   *  The client verifies the proof, unblinds the signature, and stores
      an authenticated triple of the token, optional metadata, and
      unblinded signature.

   In the redemption phase:

   *  The client retrieves an authenticated token, optional metadata and
      signature triple, and sends it to the server.

   *  The server validates that the pair is authenticated correctly and
      authorizes the client.

4.  Partially Oblivious Pseudorandom Function Protocol

   We can instantiate the protocol flow in Section 3 using the partially
   oblivious pseudorandom function (POPRF) protocol in
   [I-D.irtf-cfrg-voprf].  In summary, the issuance phase corresponds to
   receiving a pseudorandom function evaluation on the blinded data
   (with optional metadata).  The redemption phase corresponds to
   revealing finalized data back to the original issuing server.

   Note that this instantiation only provides a symmetric verification
   mechanism, since the verification of redemptions can only be
   performed by the server possessing the secret issuing key.  In
   [I-D.ietf-privacypass-architecture], we provide alternative
   frameworks for allowing asynchronous and delegated verification of
   tokens.

4.1.  Security guarantees

   The privacy of clients is determined by the unlinkability of client
   requests during the POPRF protocol.  Moreover, the one-more-forgery
   security of the POPRF prevents clients from forging valid tokens for
   a given server.  See [I-D.irtf-cfrg-voprf] for more details.

4.2.  Metadata

   The POPRF protocol provides mechanisms for embedding public metadata
   into the function evaluations.  Such metadata should be agreed
   apriori by clients and servers, and is regarded as being public to
   entities that are not even included in the explicit issuance and
   redemption exchanges.

5.  Protocol ciphersuites

   Ciphersuite negotiation is only relevant in terms of negotiating the
   appropriate ciphersuites for the underlying POPRF protocol.

6.  References

6.1.  Normative References

   [I-D.ietf-privacypass-architecture]
              Davidson, A. and C. A. Wood, "Privacy Pass Architectural
              Framework", Work in Progress, Internet-Draft, draft-ietf-
              privacypass-architecture-01, 22 February 2021,
              <https://datatracker.ietf.org/doc/html/draft-ietf-
              privacypass-architecture-01>.

   [I-D.ietf-privacypass-http-api]
              Valdez, S., "Privacy Pass HTTP API", Work in Progress,
              Internet-Draft, draft-ietf-privacypass-http-api-01, 12
              July 2021, <https://datatracker.ietf.org/doc/html/draft-
              ietf-privacypass-http-api-01>.

   [I-D.irtf-cfrg-voprf]
              Davidson, A., Faz-Hernandez, A., Sullivan, N., and C. A.
              Wood, "Oblivious Pseudorandom Functions (OPRFs) using
              Prime-Order Groups", Work in Progress, Internet-Draft,
              draft-irtf-cfrg-voprf-07, 6 July 2021,
              <https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-
              voprf-07>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://datatracker.ietf.org/doc/html/rfc2119>.

   [RFC8446]  Rescorla, E., "The Transport Layer Security (TLS) Protocol
              Version 1.3", RFC 8446, DOI 10.17487/RFC8446, August 2018,
              <https://datatracker.ietf.org/doc/html/rfc8446>.

6.2.  Informative References

   [RFC7049]  Bormann, C. and P. Hoffman, "Concise Binary Object
              Representation (CBOR)", RFC 7049, DOI 10.17487/RFC7049,
              October 2013,
              <https://datatracker.ietf.org/doc/html/rfc7049>.

   [RFC7159]  Bray, T., Ed., "The JavaScript Object Notation (JSON) Data
              Interchange Format", RFC 7159, DOI 10.17487/RFC7159, March
              2014, <https://datatracker.ietf.org/doc/html/rfc7159>.

Author's Address

   Alex Davidson
   Brave Software
   Lisbon
   Portugal

   Email: alex.davidson92@gmail.com
